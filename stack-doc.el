;;; stack-doc.el --- Browse docs generated by Stack

;; Copyright (c) 2017 Chris Done. All rights reserved.

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Code:

(require 'haskell-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Index mode

(defvar-local stack-doc-snapshot "")

(defvar stack-doc-index-mode-map (make-sparse-keymap))

(define-key stack-doc-index-mode-map (kbd "g") 'stack-doc-index-refresh)

(define-derived-mode stack-doc-index-mode
   text-mode "Stack-Doc-Index"
   "Index for stack doc.
 \\{stack-doc-index-mode-map}"
   (when (bound-and-true-p stack-doc-index-mode)
     (stack-doc-index-refresh)))

(defun stack-doc ()
  "Open an index of available packages to browse."
  (interactive)
  (let ((snapshot (stack-doc-snapshot)))
    (switch-to-buffer-other-window
     (get-buffer-create (format "*Stack:%s*" snapshot)))
    (stack-doc-index-mode)
    (setq stack-doc-snapshot snapshot)
    (setq buffer-read-only t)
    (stack-doc-index-refresh)))

(defun stack-doc-snapshot ()
  "Get the Stack snapshot for the current directory."
  (let ((string (shell-command-to-string "stack path --snapshot-doc-root")))
    (when (string-match "\\([^/]+?\\)/[^/]+?/doc$" string)
      (match-string 1 string))))

(defun stack-doc-index-refresh ()
  "Refresh the index display."
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (remove-overlays)
    (message "Refreshing stack documentation ...")
    (let* ((lines (stack-doc-packages))
           (longest (cl-reduce (lambda (x y) (max x (length y)))
                               lines
                               :initial-value 1))
           (counter 0))
      (mapc (lambda (pkg-ver)
              (let ((start (point)))
                (insert
                 (format (concat "%-" (number-to-string longest) "s") pkg-ver)
                 (if (cl-evenp counter)
                     " "
                   "\n"))
                (let ((button (make-text-button start (+ start (length pkg-ver)))))
                  (button-put button 'stack-doc-pkg-ver pkg-ver)
                  (button-put button 'action 'stack-doc-index-open)
                  (button-put button 'mouse-action 'stack-doc-index-open)))
              (setq counter (1+ counter)))
            lines)
      (goto-char (point-min))
      (insert (format "All packages installed in the snapshot: %s\n\n" stack-doc-snapshot)))
    (message "Documentation refreshed.")))

(defun stack-doc-packages ()
  "Get a list of all packages in the current snapshot."
  (split-string (shell-command-to-string "stack exec -- ghc-pkg list --simple-output")))

(defun stack-doc-index-open (button)
  "Open the docs for the package specified by BUTTON."
  (let ((pkg-ver (button-get button 'stack-doc-pkg-ver)))
    (stack-doc-open pkg-ver)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Package mode

(defvar stack-doc-package-mode-map (make-sparse-keymap))

(define-derived-mode stack-doc-package-mode
  text-mode "Stack-Doc-Package"
  "Package for stack doc.
 \\{stack-doc-package-mode-map}"
  (set (make-local-variable 'font-lock-defaults)
       '((haskell-font-lock-keywords)
         nil nil nil nil
         (font-lock-syntactic-face-function
          . haskell-syntactic-face-function)
         ;; Get help from font-lock-syntactic-keywords.
         (parse-sexp-lookup-properties . t)
         (font-lock-extra-managed-props . (composition)))))

(defun stack-doc-open (&optional m-pkg-ver)
  (interactive)
  (let* ((dir default-directory)
         (pkg-ver
          (if m-pkg-ver
              m-pkg-ver
            (ido-completing-read "Package: " (stack-doc-packages))))
         (pkg (replace-regexp-in-string "-[0-9.]+$" "" pkg-ver)))

    (let* ((doc-path (replace-regexp-in-string
                      "[\r\n]"
                      ""
                      (shell-command-to-string "stack path --snapshot-doc-root")))
           (desired-path (concat doc-path "/" pkg-ver "/" pkg ".txt")))
      (message "Desired path: %s" desired-path)
      (if (file-exists-p desired-path)
          (progn
            (message "Opening docs for %s ..." pkg-ver)
            (if (eq major-mode 'stack-doc-index-mode)
                (switch-to-buffer (get-buffer-create (format "*doc:%s*" pkg-ver)))
              (switch-to-buffer-other-window (get-buffer-create (format "*doc:%s*" pkg-ver))))
            (stack-doc-package-mode)
            (setq default-directory dir)
            (setq buffer-read-only t)
            (let ((inhibit-read-only t))
              (erase-buffer)
              (insert-file-contents-literally desired-path)))
        (progn
          (message "Docs for package doesn't exist. Launching a buffer to generate haddocks ...")
          (let ((compilation-buffer-name-function
                 (lambda (&ignore) "*stack-doc-generation*")))
            (compile (concat "stack haddock " pkg-ver) t)))))))

(provide 'stack-doc)
